---
import { Card, CardTitle, CardHeader, CardContent, CardDescription, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import BaseHead from "../../components/BaseHead.astro";
import { SITE_TITLE, API } from "../../consts";

// Check if user is logged in and is a technician
const token = Astro.cookies.get("token")?.value;
const userRole = Astro.cookies.get("userRole")?.value;

if (!token || userRole !== "TECHNICIAN") {
  return Astro.redirect("/login");
}

// Handle form submission
let error = '';
let success = false;
let bikes = [];
let reservations = [];

// Fetch bikes
try {
  const res = await fetch(`${import.meta.env.API_URL}${API.BIKES.BASE}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  if (res.ok) {
    bikes = await res.json();
  }
} catch (error) {
  console.error("Error fetching bikes:", error);
}

// Fetch pending reservations 
try {
  const res = await fetch(`${import.meta.env.API_URL}${API.RESERVATIONS.BY_STATUS(['CONFIRMED', 'PROCESSING'])}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });
  if (res.ok) {
    reservations = await res.json();
  }
} catch (error) {
  console.error("Error fetching reservations:", error);
}

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const repairDescription = formData.get('repairDescription');
    const bikeId = formData.get('bikeId');
    const reservationId = formData.get('reservationId');
    
    const serviceData = {
      repairDescription,
      bikeId: Number(bikeId),
      ...(reservationId && reservationId !== 'none' ? { reservationId: Number(reservationId) } : {}),
    };
    
    const res = await fetch(`${import.meta.env.API_URL}${API.SERVICES.BASE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(serviceData),
    });

    if (res.ok) {
      success = true;
    } else {
      const errorData = await res.json();
      error = errorData.message || 'An error occurred while creating the service record.';
    }
  } catch (e) {
    error = 'An unexpected error occurred. Please try again.';
    console.error(e);
  }
}
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Create Service Record | ${SITE_TITLE}`} description="Create a new service record" />
  </head>
  <body class="min-h-screen flex flex-col">
    <Header />
    <main class="container mx-auto px-4 py-8 flex-1">
      <div class="flex items-center mb-6">
        <a href="/services" class="text-blue-500 hover:text-blue-700 mr-2">
          &larr; Back to Services
        </a>
        <h1 class="text-3xl font-bold">Create Service Record</h1>
      </div>
      
      <div class="max-w-3xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>New Service Record</CardTitle>
            <CardDescription>Create a service record for completed repairs</CardDescription>
          </CardHeader>
          <CardContent>
            {success ? (
              <div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-6">
                Service record created successfully!
                <div class="mt-4">
                  <a href="/services" class="text-green-700 underline">Return to service records</a>
                  <span class="mx-2">or</span>
                  <a href="/services/create" class="text-green-700 underline">Create another</a>
                </div>
              </div>
            ) : (
              <form method="POST" class="space-y-6">
                {error && (
                  <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
                    {error}
                  </div>
                )}
                
                <div class="space-y-2">
                  <Label for="bikeId">Bike</Label>
                  <select 
                    id="bikeId" 
                    name="bikeId" 
                    required 
                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  >
                    <option value="">Select a bike</option>
                    {bikes.map((bike) => (
                      <option value={bike.id}>
                        {bike.model} ({bike.brand?.name || bike.brandOther || 'Unknown'}) - Owner: {bike.owner?.name}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div class="space-y-2">
                  <Label for="reservationId">Linked Reservation (Optional)</Label>
                  <select 
                    id="reservationId" 
                    name="reservationId" 
                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  >
                    <option value="none">None - Create standalone service record</option>
                    {reservations.map((reservation) => (
                      <option value={reservation.id}>
                        {reservation.bike?.model} - {reservation.status} - {new Date(reservation.reservationDate).toLocaleDateString()}
                      </option>
                    ))}
                  </select>
                  <p class="text-sm text-gray-500">
                    If this service is for a specific reservation, select it here. 
                    This will update the reservation status.
                  </p>
                </div>
                
                <div class="space-y-2">
                  <Label for="repairDescription">Repair Description</Label>
                  <Textarea 
                    id="repairDescription" 
                    name="repairDescription" 
                    placeholder="Describe the service performed..."
                    rows={5}
                    required
                  />
                </div>
                
                <div>
                  <Button type="submit" class="w-full">Create Service Record</Button>
                </div>
              </form>
            )}
          </CardContent>
        </Card>
      </div>
    </main>
    <Footer />
  </body>
</html>